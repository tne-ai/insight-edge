import pandas as pd
from tne.TNE import TNE

# Initialize session and get data
session = TNE(uid=UID, bucket_name=BUCKET, project=PROJECT, version=VERSION)
df = session.get_object("handbags-shopping_list-no_run-1_1-with_periods_cleaned.csv")

# Convert 'period' to datetime for easier filtering
df['period'] = pd.to_datetime(df['period'], format='%Y%m')

# Determine the last 3 months available in the dataset
max_date = df['period'].max()
last_3_months = max_date - pd.DateOffset(months=3)

# Filter data for the last 3 months and the rest of the periods
df_last_3 = df[df['period'] > last_3_months]
df_rest = df[df['period'] <= last_3_months]

# Calculate average sales for each subcategory in the last 3 months and the rest of the periods
avg_sales_last_3 = df_last_3.groupby('product_subgroup_desc')['sales'].mean()
avg_sales_rest = df_rest.groupby('product_subgroup_desc')['sales'].mean()

# Calculate the percentage increase for each subcategory
percentage_increase = ((avg_sales_last_3 - avg_sales_rest) / avg_sales_rest * 100).dropna()

# Identify the overperforming subcategory
overperforming_subcategory = percentage_increase.idxmax()
overperforming_increase = percentage_increase.max()

# Filter data for the overperforming subcategory in the last 3 months
df_overperforming_last_3 = df_last_3[df_last_3['product_subgroup_desc'] == overperforming_subcategory]

# Calculate the total discount value for the overperforming subcategory in the last 3 months
df_overperforming_last_3['discount'] = (df_overperforming_last_3['standard_selling_price'] - df_overperforming_last_3['aur']) * df_overperforming_last_3['sales']
total_discount_value = df_overperforming_last_3['discount'].sum()

# Prepare the result as a DataFrame
result = pd.DataFrame({
    'subcategory': [overperforming_subcategory],
    'percentage_increase': [overperforming_increase],
    'total_discount_value': [total_discount_value]
})